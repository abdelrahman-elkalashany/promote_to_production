version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  welcome: circleci/welcome-orb@0.4.1
  # aws-cli: circleci/aws-cli@2.0.3

commands:
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack


# Define the jobs we want to run for this project
jobs:
  #myjob1:  # Choose any name, such as `build`
      # The primary container, where your job's commands will run
      #docker:
        #- image: alpine:latest
      #steps:
        #- checkout # check out the code in the project directory
        #- run: echo "hello world" # run the `echo` command

  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          #ame: Create Cloudformation Stack
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack \
              --region us-east-1
            echo "[all]" > inventory.txt
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
#           aws cloudformation deploy \
#             --template-file template.yml \
#             --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
#             --region us-east-1
      - persist_to_workspace:
          root: .
          paths:
            - inventory.txt

  # Exercise: Config and Deployment
  configure_infrastructure: 
   docker:
     - image: python:3.7-alpine3.11
   steps:
     - checkout
     - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
             fingerprints: ["72:e7:fe:7d:cc:12:d7:e3:42:e1:51:3a:de:53:7e:1c"] 
     - run:
         name: Install Ansible Dependencies
         command: |
            apk add --update openssh-client ansible
          # apk add --update ansible  
          
     - run:
         name: Run Playbook and Configure server
         command: |
            ansible-playbook -i inventory.txt main.yml

          # Your command
          # ansible-playbook -i inventory main.yml
          #  chmod 400 CICD_Key_PEM.pem
          #  ansible-playbook main.yml -i inventory --private-key CICD_Key_PEM.pem

  smoke_test:
    docker:
      - image: amazon/aws-cli # used to run destory while the original image for smoke test ->  - image: alpine:latest
    steps:
      - checkout
      - run: yum check-update curl
      - run:
          name: smoke test  # can also simulate error "type non-exsited URL"
          command: |
            chmod +x CurlURL.sh
            sh CurlURL.sh
#            yum install -y tar gzip
#            URL="https://blog.udacity.com/"
#            # Test if website exists
#            if curl -s --head ${URL} 
#            then
#              echo "It worked!"
#              return 0  #this one make the workflow fail i think bec. python not installed
#            else
#              echo "Rolling Back"
#              return 1
#            fi
      - destroy_environment

# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      #- myjob1
      - create_infrastructure
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          requires:
            - configure_infrastructure